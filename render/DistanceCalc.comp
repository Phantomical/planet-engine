#version 430


#define SIDE_LEN 129

layout(local_size_x = 1) in;

// This shader calculates the distance 
// of each vertex from the local origin

struct VertexInput
{
	vec4 vtx_start;
	float _u1;
	float _u2;
	float _u3;
};

layout(binding = 0, std430) buffer VertexInputs
{
	VertexInput inputs[];
};

layout(binding = 1, std430) buffer ResultBuffer
{
	float result;
};

shared float values[SIDE_LEN * ((SIDE_LEN + 15) / 16)];

#define vertex vtx_start.xyz

void main()
{
	const uvec2 size_vec = uvec2(SIDE_LEN, ((SIDE_LEN + 15) / 16));

	// Get the index into the values array
	uint index = gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y
		+ gl_WorkGroupID.y * gl_NumWorkGroups.x 
		+ gl_WorkGroupID.x + gl_LocalInvocationIndex;
	uint size = size_vec.x * size_vec.y;
	
	float val = -1.0;
	for (uint i = 0; i < 16 && index * 4 + 1 < size; ++i)
		val = max(val, length(inputs[index * 4 + i].vertex));

	values[index] = val;
	
	memoryBarrierShared();
	barrier();

	for (uint s = values.length() >> 1; s > 0; s >>= 1)
	{
		if (index < s - 1)
		{
			values[index] = max(values[index], values[index + s]);
		}
		else if (index < s)
		{
			if ((index & 1) == 0)
				values[index] = max(values[index], values[index + s]);
			// We don't need to do anything if s is odd
			// since this is the last element there is
			// no other element to compare against
		}

		memoryBarrierShared();
		barrier();
	}

	if (index == 0)
	{
		result = values[0];
	}
}
