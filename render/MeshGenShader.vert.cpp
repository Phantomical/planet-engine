const char* MeshGenShader = 
"#version 430\n"
"\n"
"\n"
"//\n"
"// Description : Array and textureless GLSL 2D/3D/4D simplex \n"
"//               noise functions.\n"
"//      Author : Ian McEwan, Ashima Arts.\n"
"//  Maintainer : stegu\n"
"//     Lastmod : 20110822 (ijm)\n"
"//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n"
"//               Distributed under the MIT License. See LICENSE file.\n"
"//               https://github.com/ashima/webgl-noise\n"
"//               https://github.com/stegu/webgl-noise\n"
"// \n"
"\n"
"dvec3 simplex1_mod289(dvec3 x)\n"
"{\n"
"  return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"dvec4 simplex1_mod289(dvec4 x)\n"
"{\n"
"  return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"dvec4 simplex1_permute(dvec4 x)\n"
"{\n"
"     return simplex1_mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"dvec4 simplex1_taylorInvSqrt(dvec4 r)\n"
"{\n"
"  return 1.79284291400159 - 0.85373472095314 * r;\n"
"}\n"
"double simplex1(dvec3 v)\n"
"{ \n"
"  const dvec2  C = dvec2(1.0/6.0, 1.0/3.0) ;\n"
"  const dvec4  D = dvec4(0.0, 0.5, 1.0, 2.0);\n"
"\n"
"// First corner\n"
"  dvec3 i  = floor(v + dot(v, C.yyy) );\n"
"  dvec3 x0 =   v - i + dot(i, C.xxx) ;\n"
"\n"
"// Other corners\n"
"  dvec3 g = step(x0.yzx, x0.xyz);\n"
"  dvec3 l = 1.0 - g;\n"
"  dvec3 i1 = min( g.xyz, l.zxy );\n"
"  dvec3 i2 = max( g.xyz, l.zxy );\n"
"\n"
"  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n"
"  //   x1 = x0 - i1  + 1.0 * C.xxx;\n"
"  //   x2 = x0 - i2  + 2.0 * C.xxx;\n"
"  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n"
"  dvec3 x1 = x0 - i1 + C.xxx;\n"
"  dvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n"
"  dvec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n"
"\n"
"// Permutations\n"
"  i = simplex1_mod289(i); \n"
"  dvec4 p = simplex1_permute( simplex1_permute( simplex1_permute( \n"
"             i.z + dvec4(0.0, i1.z, i2.z, 1.0 ))\n"
"           + i.y + dvec4(0.0, i1.y, i2.y, 1.0 )) \n"
"           + i.x + dvec4(0.0, i1.x, i2.x, 1.0 ));\n"
"\n"
"// Gradients: 7x7 points over a square, mapped onto an octahedron.\n"
"// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n"
"  double n_ = 0.142857142857; // 1.0/7.0\n"
"  dvec3  ns = n_ * D.wyz - D.xzx;\n"
"\n"
"  dvec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n"
"\n"
"  dvec4 x_ = floor(j * ns.z);\n"
"  dvec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n"
"\n"
"  dvec4 x = x_ *ns.x + ns.yyyy;\n"
"  dvec4 y = y_ *ns.x + ns.yyyy;\n"
"  dvec4 h = 1.0 - abs(x) - abs(y);\n"
"\n"
"  dvec4 b0 = dvec4( x.xy, y.xy );\n"
"  dvec4 b1 = dvec4( x.zw, y.zw );\n"
"\n"
"  //dvec4 s0 = dvec4(lessThan(b0,0.0))*2.0 - 1.0;\n"
"  //dvec4 s1 = dvec4(lessThan(b1,0.0))*2.0 - 1.0;\n"
"  dvec4 s0 = floor(b0)*2.0 + 1.0;\n"
"  dvec4 s1 = floor(b1)*2.0 + 1.0;\n"
"  dvec4 sh = -step(h, dvec4(0.0));\n"
"\n"
"  dvec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n"
"  dvec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n"
"\n"
"  dvec3 p0 = dvec3(a0.xy,h.x);\n"
"  dvec3 p1 = dvec3(a0.zw,h.y);\n"
"  dvec3 p2 = dvec3(a1.xy,h.z);\n"
"  dvec3 p3 = dvec3(a1.zw,h.w);\n"
"\n"
"//Normalise gradients\n"
"  dvec4 norm = simplex1_taylorInvSqrt(dvec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n"
"  p0 *= norm.x;\n"
"  p1 *= norm.y;\n"
"  p2 *= norm.z;\n"
"  p3 *= norm.w;\n"
"\n"
"// Mix final noise value\n"
"  dvec4 m = max(0.6 - dvec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n"
"  m = m * m;\n"
"  return 42.0 * dot( m*m, dvec4( dot(p0,x0), dot(p1,x1), \n"
"                                dot(p2,x2), dot(p3,x3) ) );\n"
"}\n"
"\n"
"// Cellular noise (\"Worley noise\") in 3D in GLSL.\n"
"// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n"
"// This code is released under the conditions of the MIT license.\n"
"// See LICENSE file for details.\n"
"// https://github.com/stegu/webgl-noise\n"
"\n"
"// Modulo 289 without a division (only multiplications)\n"
"dvec3 voronoi1_mod289(dvec3 x)\n"
"{\n"
"	return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"// Modulo 7 without a division\n"
"dvec3 voronoi1_mod7(dvec3 x)\n"
"{\n"
"	return x - floor(x * (1.0 / 7.0)) * 7.0;\n"
"}\n"
"// Permutation polynomial: (34x^2 + x) mod 289\n"
"dvec3 voronoi1_permute(dvec3 x)\n"
"{\n"
"	return voronoi1_mod289((34.0 * x + 1.0) * x);\n"
"}\n"
"\n"
"// Cellular noise, returning F1 and F2 in a dvec2.\n"
"// 3x3x3 search region for good F2 everywhere, but a lot\n"
"// slower than the 2x2x2 version.\n"
"// The code below is a bit scary even to its author,\n"
"// but it has at least half decent performance on a\n"
"// modern GPU. In any case, it beats any software\n"
"// implementation of Worley noise hands down.\n"
"dvec2 voronoi1_source(dvec3 P)\n"
"{\n"
"#define K 0.142857142857 // 1/7\n"
"#define Ko 0.428571428571 // 1/2-K/2\n"
"#define K2 0.020408163265306 // 1/(7*7)\n"
"#define Kz 0.166666666667 // 1/6\n"
"#define Kzo 0.416666666667 // 1/2-1/6*2\n"
"#define jitter 1.0 // smaller jitter gives more regular pattern\n"
"\n"
"	dvec3 Pi = voronoi1_mod289(floor(P));\n"
"	dvec3 Pf = fract(P) - 0.5;\n"
"	\n"
"	dvec3 Pfx = Pf.x + dvec3(1.0, 0.0, -1.0);\n"
"	dvec3 Pfy = Pf.y + dvec3(1.0, 0.0, -1.0);\n"
"	dvec3 Pfz = Pf.z + dvec3(1.0, 0.0, -1.0);\n"
"	\n"
"	dvec3 p = voronoi1_permute(Pi.x + dvec3(-1.0, 0.0, 1.0));\n"
"	dvec3 p1 = voronoi1_permute(p + Pi.y - 1.0);\n"
"	dvec3 p2 = voronoi1_permute(p + Pi.y);\n"
"	dvec3 p3 = voronoi1_permute(p + Pi.y + 1.0);\n"
"	\n"
"	dvec3 p11 = voronoi1_permute(p1 + Pi.z - 1.0);\n"
"	dvec3 p12 = voronoi1_permute(p1 + Pi.z);\n"
"	dvec3 p13 = voronoi1_permute(p1 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 p21 = voronoi1_permute(p2 + Pi.z - 1.0);\n"
"	dvec3 p22 = voronoi1_permute(p2 + Pi.z);\n"
"	dvec3 p23 = voronoi1_permute(p2 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 p31 = voronoi1_permute(p3 + Pi.z - 1.0);\n"
"	dvec3 p32 = voronoi1_permute(p3 + Pi.z);\n"
"	dvec3 p33 = voronoi1_permute(p3 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 ox11 = fract(p11 * K) - Ko;\n"
"	dvec3 oy11 = voronoi1_mod7(floor(p11 * K)) * K - Ko;\n"
"	dvec3 oz11 = floor(p11 * K2) * Kz - Kzo; // p11 < 289 guaranteed\n"
"	\n"
"	dvec3 ox12 = fract(p12 * K) - Ko;\n"
"	dvec3 oy12 = voronoi1_mod7(floor(p12 * K)) * K - Ko;\n"
"	dvec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox13 = fract(p13 * K) - Ko;\n"
"	dvec3 oy13 = voronoi1_mod7(floor(p13 * K)) * K - Ko;\n"
"	dvec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox21 = fract(p21 * K) - Ko;\n"
"	dvec3 oy21 = voronoi1_mod7(floor(p21 * K)) * K - Ko;\n"
"	dvec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox22 = fract(p22 * K) - Ko;\n"
"	dvec3 oy22 = voronoi1_mod7(floor(p22 * K)) * K - Ko;\n"
"	dvec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox23 = fract(p23 * K) - Ko;\n"
"	dvec3 oy23 = voronoi1_mod7(floor(p23 * K)) * K - Ko;\n"
"	dvec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox31 = fract(p31 * K) - Ko;\n"
"	dvec3 oy31 = voronoi1_mod7(floor(p31 * K)) * K - Ko;\n"
"	dvec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox32 = fract(p32 * K) - Ko;\n"
"	dvec3 oy32 = voronoi1_mod7(floor(p32 * K)) * K - Ko;\n"
"	dvec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox33 = fract(p33 * K) - Ko;\n"
"	dvec3 oy33 = voronoi1_mod7(floor(p33 * K)) * K - Ko;\n"
"	dvec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 dx11 = Pfx + jitter * ox11;\n"
"	dvec3 dy11 = Pfy.x + jitter * oy11;\n"
"	dvec3 dz11 = Pfz.x + jitter * oz11;\n"
"	\n"
"	dvec3 dx12 = Pfx + jitter * ox12;\n"
"	dvec3 dy12 = Pfy.x + jitter * oy12;\n"
"	dvec3 dz12 = Pfz.y + jitter * oz12;\n"
"	\n"
"	dvec3 dx13 = Pfx + jitter * ox13;\n"
"	dvec3 dy13 = Pfy.x + jitter * oy13;\n"
"	dvec3 dz13 = Pfz.z + jitter * oz13;\n"
"	\n"
"	dvec3 dx21 = Pfx + jitter * ox21;\n"
"	dvec3 dy21 = Pfy.y + jitter * oy21;\n"
"	dvec3 dz21 = Pfz.x + jitter * oz21;\n"
"	\n"
"	dvec3 dx22 = Pfx + jitter * ox22;\n"
"	dvec3 dy22 = Pfy.y + jitter * oy22;\n"
"	dvec3 dz22 = Pfz.y + jitter * oz22;\n"
"	\n"
"	dvec3 dx23 = Pfx + jitter * ox23;\n"
"	dvec3 dy23 = Pfy.y + jitter * oy23;\n"
"	dvec3 dz23 = Pfz.z + jitter * oz23;\n"
"	\n"
"	dvec3 dx31 = Pfx + jitter * ox31;\n"
"	dvec3 dy31 = Pfy.z + jitter * oy31;\n"
"	dvec3 dz31 = Pfz.x + jitter * oz31;\n"
"	\n"
"	dvec3 dx32 = Pfx + jitter * ox32;\n"
"	dvec3 dy32 = Pfy.z + jitter * oy32;\n"
"	dvec3 dz32 = Pfz.y + jitter * oz32;\n"
"	\n"
"	dvec3 dx33 = Pfx + jitter * ox33;\n"
"	dvec3 dy33 = Pfy.z + jitter * oy33;\n"
"	dvec3 dz33 = Pfz.z + jitter * oz33;\n"
"	\n"
"	dvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n"
"	dvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n"
"	dvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n"
"	dvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n"
"	dvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n"
"	dvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n"
"	dvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n"
"	dvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n"
"	dvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n"
"	\n"
"	// Do it right and sort out both F1 and F2\n"
"	dvec3 d1a = min(d11, d12);\n"
"	d12 = max(d11, d12);\n"
"	d11 = min(d1a, d13); // Smallest now not in d12 or d13\n"
"	d13 = max(d1a, d13);\n"
"	d12 = min(d12, d13); // 2nd smallest now not in d13\n"
"	dvec3 d2a = min(d21, d22);\n"
"	d22 = max(d21, d22);\n"
"	d21 = min(d2a, d23); // Smallest now not in d22 or d23\n"
"	d23 = max(d2a, d23);\n"
"	d22 = min(d22, d23); // 2nd smallest now not in d23\n"
"	dvec3 d3a = min(d31, d32);\n"
"	d32 = max(d31, d32);\n"
"	d31 = min(d3a, d33); // Smallest now not in d32 or d33\n"
"	d33 = max(d3a, d33);\n"
"	d32 = min(d32, d33); // 2nd smallest now not in d33\n"
"	dvec3 da = min(d11, d21);\n"
"	d21 = max(d11, d21);\n"
"	d11 = min(da, d31); // Smallest now in d11\n"
"	d31 = max(da, d31); // 2nd smallest now not in d31\n"
"	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n"
"	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n"
"	d12 = min(d12, d21); // 2nd smallest now not in d21\n"
"	d12 = min(d12, d22); // nor in d22\n"
"	d12 = min(d12, d31); // nor in d31\n"
"	d12 = min(d12, d32); // nor in d32\n"
"	d11.yz = min(d11.yz, d12.xy); // nor in d12.yz\n"
"	d11.y = min(d11.y, d12.z); // Only two more to go\n"
"	d11.y = min(d11.y, d11.z); // Done! (Phew!)\n"
"	return sqrt(d11.xy); // F1, F2\n"
"\n"
"#undef K										\n"
"#undef Ko\n"
"#undef K2\n"
"#undef Kz\n"
"#undef Kzo\n"
"#undef jitter\n"
"}\n"
"\n"
"// Cellular noise (\"Worley noise\") in 3D in GLSL.\n"
"// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n"
"// This code is released under the conditions of the MIT license.\n"
"// See LICENSE file for details.\n"
"// https://github.com/stegu/webgl-noise\n"
"\n"
"// Modulo 289 without a division (only multiplications)\n"
"dvec3 voronoi2_mod289(dvec3 x)\n"
"{\n"
"	return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"// Modulo 7 without a division\n"
"dvec3 voronoi2_mod7(dvec3 x)\n"
"{\n"
"	return x - floor(x * (1.0 / 7.0)) * 7.0;\n"
"}\n"
"// Permutation polynomial: (34x^2 + x) mod 289\n"
"dvec3 voronoi2_permute(dvec3 x)\n"
"{\n"
"	return voronoi2_mod289((34.0 * x + 1.0) * x);\n"
"}\n"
"\n"
"// Cellular noise, returning F1 and F2 in a dvec2.\n"
"// 3x3x3 search region for good F2 everywhere, but a lot\n"
"// slower than the 2x2x2 version.\n"
"// The code below is a bit scary even to its author,\n"
"// but it has at least half decent performance on a\n"
"// modern GPU. In any case, it beats any software\n"
"// implementation of Worley noise hands down.\n"
"dvec2 voronoi2_source(dvec3 P)\n"
"{\n"
"#define K 0.142857142857 // 1/7\n"
"#define Ko 0.428571428571 // 1/2-K/2\n"
"#define K2 0.020408163265306 // 1/(7*7)\n"
"#define Kz 0.166666666667 // 1/6\n"
"#define Kzo 0.416666666667 // 1/2-1/6*2\n"
"#define jitter 1.0 // smaller jitter gives more regular pattern\n"
"\n"
"	dvec3 Pi = voronoi2_mod289(floor(P));\n"
"	dvec3 Pf = fract(P) - 0.5;\n"
"	\n"
"	dvec3 Pfx = Pf.x + dvec3(1.0, 0.0, -1.0);\n"
"	dvec3 Pfy = Pf.y + dvec3(1.0, 0.0, -1.0);\n"
"	dvec3 Pfz = Pf.z + dvec3(1.0, 0.0, -1.0);\n"
"	\n"
"	dvec3 p = voronoi2_permute(Pi.x + dvec3(-1.0, 0.0, 1.0));\n"
"	dvec3 p1 = voronoi2_permute(p + Pi.y - 1.0);\n"
"	dvec3 p2 = voronoi2_permute(p + Pi.y);\n"
"	dvec3 p3 = voronoi2_permute(p + Pi.y + 1.0);\n"
"	\n"
"	dvec3 p11 = voronoi2_permute(p1 + Pi.z - 1.0);\n"
"	dvec3 p12 = voronoi2_permute(p1 + Pi.z);\n"
"	dvec3 p13 = voronoi2_permute(p1 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 p21 = voronoi2_permute(p2 + Pi.z - 1.0);\n"
"	dvec3 p22 = voronoi2_permute(p2 + Pi.z);\n"
"	dvec3 p23 = voronoi2_permute(p2 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 p31 = voronoi2_permute(p3 + Pi.z - 1.0);\n"
"	dvec3 p32 = voronoi2_permute(p3 + Pi.z);\n"
"	dvec3 p33 = voronoi2_permute(p3 + Pi.z + 1.0);\n"
"	\n"
"	dvec3 ox11 = fract(p11 * K) - Ko;\n"
"	dvec3 oy11 = voronoi2_mod7(floor(p11 * K)) * K - Ko;\n"
"	dvec3 oz11 = floor(p11 * K2) * Kz - Kzo; // p11 < 289 guaranteed\n"
"	\n"
"	dvec3 ox12 = fract(p12 * K) - Ko;\n"
"	dvec3 oy12 = voronoi2_mod7(floor(p12 * K)) * K - Ko;\n"
"	dvec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox13 = fract(p13 * K) - Ko;\n"
"	dvec3 oy13 = voronoi2_mod7(floor(p13 * K)) * K - Ko;\n"
"	dvec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox21 = fract(p21 * K) - Ko;\n"
"	dvec3 oy21 = voronoi2_mod7(floor(p21 * K)) * K - Ko;\n"
"	dvec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox22 = fract(p22 * K) - Ko;\n"
"	dvec3 oy22 = voronoi2_mod7(floor(p22 * K)) * K - Ko;\n"
"	dvec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox23 = fract(p23 * K) - Ko;\n"
"	dvec3 oy23 = voronoi2_mod7(floor(p23 * K)) * K - Ko;\n"
"	dvec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox31 = fract(p31 * K) - Ko;\n"
"	dvec3 oy31 = voronoi2_mod7(floor(p31 * K)) * K - Ko;\n"
"	dvec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox32 = fract(p32 * K) - Ko;\n"
"	dvec3 oy32 = voronoi2_mod7(floor(p32 * K)) * K - Ko;\n"
"	dvec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 ox33 = fract(p33 * K) - Ko;\n"
"	dvec3 oy33 = voronoi2_mod7(floor(p33 * K)) * K - Ko;\n"
"	dvec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n"
"	\n"
"	dvec3 dx11 = Pfx + jitter * ox11;\n"
"	dvec3 dy11 = Pfy.x + jitter * oy11;\n"
"	dvec3 dz11 = Pfz.x + jitter * oz11;\n"
"	\n"
"	dvec3 dx12 = Pfx + jitter * ox12;\n"
"	dvec3 dy12 = Pfy.x + jitter * oy12;\n"
"	dvec3 dz12 = Pfz.y + jitter * oz12;\n"
"	\n"
"	dvec3 dx13 = Pfx + jitter * ox13;\n"
"	dvec3 dy13 = Pfy.x + jitter * oy13;\n"
"	dvec3 dz13 = Pfz.z + jitter * oz13;\n"
"	\n"
"	dvec3 dx21 = Pfx + jitter * ox21;\n"
"	dvec3 dy21 = Pfy.y + jitter * oy21;\n"
"	dvec3 dz21 = Pfz.x + jitter * oz21;\n"
"	\n"
"	dvec3 dx22 = Pfx + jitter * ox22;\n"
"	dvec3 dy22 = Pfy.y + jitter * oy22;\n"
"	dvec3 dz22 = Pfz.y + jitter * oz22;\n"
"	\n"
"	dvec3 dx23 = Pfx + jitter * ox23;\n"
"	dvec3 dy23 = Pfy.y + jitter * oy23;\n"
"	dvec3 dz23 = Pfz.z + jitter * oz23;\n"
"	\n"
"	dvec3 dx31 = Pfx + jitter * ox31;\n"
"	dvec3 dy31 = Pfy.z + jitter * oy31;\n"
"	dvec3 dz31 = Pfz.x + jitter * oz31;\n"
"	\n"
"	dvec3 dx32 = Pfx + jitter * ox32;\n"
"	dvec3 dy32 = Pfy.z + jitter * oy32;\n"
"	dvec3 dz32 = Pfz.y + jitter * oz32;\n"
"	\n"
"	dvec3 dx33 = Pfx + jitter * ox33;\n"
"	dvec3 dy33 = Pfy.z + jitter * oy33;\n"
"	dvec3 dz33 = Pfz.z + jitter * oz33;\n"
"	\n"
"	dvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n"
"	dvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n"
"	dvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n"
"	dvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n"
"	dvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n"
"	dvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n"
"	dvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n"
"	dvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n"
"	dvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n"
"	\n"
"	// Do it right and sort out both F1 and F2\n"
"	dvec3 d1a = min(d11, d12);\n"
"	d12 = max(d11, d12);\n"
"	d11 = min(d1a, d13); // Smallest now not in d12 or d13\n"
"	d13 = max(d1a, d13);\n"
"	d12 = min(d12, d13); // 2nd smallest now not in d13\n"
"	dvec3 d2a = min(d21, d22);\n"
"	d22 = max(d21, d22);\n"
"	d21 = min(d2a, d23); // Smallest now not in d22 or d23\n"
"	d23 = max(d2a, d23);\n"
"	d22 = min(d22, d23); // 2nd smallest now not in d23\n"
"	dvec3 d3a = min(d31, d32);\n"
"	d32 = max(d31, d32);\n"
"	d31 = min(d3a, d33); // Smallest now not in d32 or d33\n"
"	d33 = max(d3a, d33);\n"
"	d32 = min(d32, d33); // 2nd smallest now not in d33\n"
"	dvec3 da = min(d11, d21);\n"
"	d21 = max(d11, d21);\n"
"	d11 = min(da, d31); // Smallest now in d11\n"
"	d31 = max(da, d31); // 2nd smallest now not in d31\n"
"	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n"
"	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n"
"	d12 = min(d12, d21); // 2nd smallest now not in d21\n"
"	d12 = min(d12, d22); // nor in d22\n"
"	d12 = min(d12, d31); // nor in d31\n"
"	d12 = min(d12, d32); // nor in d32\n"
"	d11.yz = min(d11.yz, d12.xy); // nor in d12.yz\n"
"	d11.y = min(d11.y, d12.z); // Only two more to go\n"
"	d11.y = min(d11.y, d11.z); // Done! (Phew!)\n"
"	return sqrt(d11.xy); // F1, F2\n"
"\n"
"#undef K										\n"
"#undef Ko\n"
"#undef K2\n"
"#undef Kz\n"
"#undef Kzo\n"
"#undef jitter\n"
"}\n"
"double voronoi2(dvec3 v)\n"
"{\n"
"	// Only return F2\n"
"	return voronoi2_source(v).y;\n"
"}\n"
"\n"
"double noise(dvec3 _v)\n"
"{\n"
"	double total = 0.0;\n"
"	double maxAmplitude = 0.0;\n"
"	double amplitude = 1.0;\n"
"	double frequency = 1.0;\n"
"	uint octaves = 8;\n"
"	double persistance = voronoi1(v);\n"
"	double lacunarity = voronoi1(v);\n"
"\n"
"	for (uint i = 0; i < octaves; ++i)\n"
"	{\n"
"		dvec3 v = _v * frequency;\n"
"		total += simplex1(v) * amplitude;\n"
"		frequency *= lacunarity;\n"
"		maxAmplitude += amplitude;\n"
"		amplitude *= persistance;\n"
"	}\n"
"\n"
"	return total / maxAmplitude;\n"
"}\n"
"\n"
"\n"
"layout(std140, binding = 0) uniform GeneratorInputs\n"
"{\n"
"	dvec4 pos;\n"
"	dvec4 nwc;\n"
"	dvec4 nec;\n"
"	dvec4 swc;\n"
"	dvec4 sec;\n"
"	double planet_radius;\n"
"	double skirt_depth;\n"
"	double scale;\n"
"};\n"
"\n"
"layout(location = 0) in float unused;\n"
"\n"
"out vec3 out_vertex;\n"
"out vec3 out_normal;\n"
"out float out_displacement;\n"
"\n"
"dvec3 to_sphere(dvec3 v)\n"
"{\n"
"	return planet_radius * normalize(v);\n"
"}\n"
"\n"
"#define pos pos.xyz\n"
"#define nwc nwc.xyz\n"
"#define nec nec.xyz\n"
"#define swc swc.xyz\n"
"#define sec sec.xyz\n"
"\n"
"void main()\n"
"{\n"
"#define SIDE_LEN 129\n"
"#define INTERP (1.0 / (SIDE_LEN - 1))\n"
"	\n"
"	if (gl_VertexID < SIDE_LEN * SIDE_LEN)\n"
"	{\n"
"		double interp = INTERP * double(gl_VertexID / SIDE_LEN);\n"
"		dvec3 v1 = mix(nwc, nec, interp);\n"
"		dvec3 v2 = mix(swc, sec, interp);\n"
"		dvec3 vtx = to_sphere(lerp(v1, v2, INTERP * double(gl_VertexID % SIDE_LEN)));\n"
"		dvec3 normal = normalize(vtx);\n"
"		double displacement = noise(vtx) * scale;\n"
"		vtx += normal * displacement - pos;\n"
"\n"
"		out_vertex = vec3(vtx);\n"
"		out_normal = vec3(normal);\n"
"		out_displacement = float(displacement);\n"
"	}\n"
"	else if (gl_VertexID < SIDE_LEN * SIDE_LEN + SIDE_LEN)\n"
"	{\n"
"		dvec3 vertex = to_sphere(lerp(nwc, swc, INTERP * (gl_VertexID - (SIDE_LEN * SIDE_LEN))));\n"
"		dvec3 normal = normalize(vertex);\n"
"		vertex -= normal * skirt_depth + pos;\n"
"\n"
"		out_vertex = vec3(vertex);\n"
"		out_normal = vec3(normal);\n"
"		out_displacement = float(-skirt_depth);\n"
"	}\n"
"	else if (gl_VertexID < SIDE_LEN * SIDE_LEN + SIDE_LEN * 2)\n"
"	{\n"
"		dvec3 vertex = to_sphere(lerp(swc, sec, INTERP * (gl_VertexID - (SIDE_LEN * SIDE_LEN + SIDE_LEN))));\n"
"		dvec3 normal = normalize(vertex);\n"
"		vertex -= normal * skirt_depth + pos;\n"
"\n"
"		out_vertex = vec3(vertex);\n"
"		out_normal = vec3(normal);\n"
"		out_displacement = float(-skirt_depth);\n"
"	}\n"
"	else if (gl_VertexID < SIDE_LEN * SIDE_LEN + SIDE_LEN * 3)\n"
"	{\n"
"		dvec3 vertex = to_sphere(lerp(nec, sec, INTERP * (gl_VertexID - (SIDE_LEN * SIDE_LEN + SIDE_LEN * 2))));\n"
"		dvec3 normal = normalize(vertex);\n"
"		vertex -= normal * skirt_depth + pos;\n"
"\n"
"		out_vertex = vec3(vertex);\n"
"		out_normal = vec3(normal);\n"
"		out_displacement = float(-skirt_depth);\n"
"	}\n"
"	else\n"
"	{\n"
"		dvec3 vertex = to_sphere(lerp(nwc, nec, INTERP * (gl_VertexID - (SIDE_LEN * SIDE_LEN + SIDE_LEN * 3))));\n"
"		dvec3 normal = normalize(vertex);\n"
"		vertex -= normal * skirt_depth + pos;\n"
"\n"
"		out_vertex = vec3(vertex);\n"
"		out_normal = vec3(normal);\n"
"		out_displacement = float(-skirt_depth);\n"
"	}\n"
"}\n"
;

